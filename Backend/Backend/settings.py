"""
Django settings for Backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# ======================================
# SECURITY & DEBUG SETTINGS
# ======================================

SECRET_KEY = "django-insecure-73t0g!=i6#-v#=e1a$j=)v6cbtdo+1jywwci#$x$nzxyb3+1q1"
# SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-73t0g!=i6#-v#=e1a$j=)v6cbtdo+1jywwci#$x$nzxyb3+1q1")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# DEBUG = True

# ...............changes......................
# ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Deployment....
ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = [
    "https://majorproject-esyrent.onrender.com",
]

# WEBSITE_URL = "http://localhost:8000"  # Base URL for the website
WEBSITE_URL = os.getenv("WEBSITE_URL", "http://localhost:8000")

SITE_ID = 1  # Default site ID for Django sites framework

# ================================
# Email Configuration
# ================================

# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# settings.py
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")  # default to Gmail
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")          # your email, e.g., your_email@gmail.com
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # your app password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Optional: admin email to receive notifications
ADMIN_EMAIL = "rc.goutam.choudhary@gmail.com"
# .............................................................

# ======================================
# INSTALLED APPS
# ======================================

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "accounts",  # Custom app for user accounts
    "property",  # Custom app for property management

    "rest_framework",  # Django REST Framework for API development
    "rest_framework.authtoken",  # Token authentication for REST Framework
    "rest_framework_simplejwt",  # JWT authentication for REST Framework
    "rest_framework_simplejwt.token_blacklist",  # JWT token blacklist for logout
    "corsheaders",  # CORS headers for cross-origin requests


    "allauth",  # Django Allauth for user registration and authentication
    "allauth.account",  # Allauth account management
    "allauth.socialaccount", # changes..........
    "dj_rest_auth",  # Django REST Auth for user authentication
    "dj_rest_auth.registration",  # Registration endpoints for REST Auth

]

# ======================================
# MIDDLEWARE
# ======================================
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # ✅ For static files on Render
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Middleware for handling CORS
    "allauth.account.middleware.AccountMiddleware",  # Middleware for Allauth account management
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Backend.wsgi.application"


# ======================================
# DATABASE (Supabase PostgreSQL)
# ======================================

# Local..........
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("SUPABASE_DB_NAME"),
        'USER': os.getenv("SUPABASE_DB_USER"),
        'PASSWORD': os.getenv("SUPABASE_DB_PASSWORD"),
        'HOST': os.getenv("SUPABASE_DB_HOST"),  # ✅ must be db.<project>.supabase.co
        'PORT': os.getenv("SUPABASE_DB_PORT"),
        'OPTIONS': {
            'sslmode': 'require',   # ✅ Supabase requires SSL
        },
    },
}

# # Deployment.........
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.getenv('DATABASE_URL'),  # DATABASE_URL will be set on Render
#         conn_max_age=600,                   # keeps connections alive
#         ssl_require=True                     # required by Supabase
#     )
# }

# ======================================
# PASSWORD VALIDATION
# ======================================

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# ======================================
# AUTHENTICATION
# ======================================
AUTH_USER_MODEL = 'accounts.User'  # Custom user model

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,


    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",


    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

REST_AUTH = {
    "USE_JWT": True,  # Use JWT for authentication
    "JWT_AUTH_HTTPONLY": False
}

# ======================================
# CORS (React Frontend)
# ======================================
# CORS_ALLOWED_ORIGINS = [
#     # Local........
#     # "http://localhost:5173",  # vite/React
#     # "http://localhost:8000",  # Django development server   

#     # Deployement....
#     "https://major-project-two-tau.vercel.app",
#     "https://majorproject-esyrent.onrender.com",
# ]

CORS_ALLOWED_ORIGINS = [
    "https://majorproject-esyrent.onrender.com",
    "https://major-project-two-tau.vercel.app",
]

CORS_ALLOW_CREDENTIALS = True  # Allow cookies to be included in CORS requests


# ======================================
# STATIC & MEDIA FILES (for Render)
# ======================================
# STATIC_URL = "static/"
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# ======================================
# INTERNATIONALIZATION
# ======================================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"